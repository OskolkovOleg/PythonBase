# Функция `reduce()` является утилитой, которая входит в модуль `functools` Python. Она применяет определенную функцию к последовательности аргументов (например, список, набор, кортеж) в итераторном порядке.

# Вот основной синтаксис:

from functools import reduce

# result = reduce(function, iterable[, initializer])


# В этом коде:

# - `function` - это функция Python, которую вы определяете или встроенная функция Python. Она должна принимать два входа и возвращать один выход.
# - `iterable` - это последовательность входных значений, которые должны быть сокращены. Это должна быть последовательность (такая как список или кортеж).
# - `initializer` - это необязательное значение, которое используется в качестве начального значения вычисления. Если инициатор предоставляется, он помещается перед элементами итерируемого объекта в расчете и служит по умолчанию, когда итерируемый объект пуст.

# Функция `reduce()` будет:

# - Взять первые два элемента из итерируемого объекта и применить к ним функцию.
# - Взять результат и следующий элемент из итерируемого, и применить к ним функцию.
# - Повторять этот процесс до исчерпания итерируемого объекта.
# - Если указано начальное значение, оно используется в качестве отправной точки.

# Общая структура функции работает следующим образом:

# reduce(function, [a1, a2, a3, a4]) => function(function(function(a1, a2), a3), a4)


# Применение:

# 1. **Вычисление факториала**: Вы можете вычислить факториал числа с помощью `reduce()` следующим образом:

# python
from functools import reduce

def multiply(x,y):
    return x*y;

num = 5
factorial = reduce(multiply, range(1, num+1))
print(factorial) # Вывод: 120
# 

# Здесь функция `reduce` применяет функцию `multiply` к последовательности чисел от 1 до 5 (включительно) для получения факториала.

# 2. **Поиск максимального и минимального элемента**: Вы можете использовать `reduce` для поиска максимального или минимального элемента в списке:

# python
from functools import reduce

nums = [5, 8, 6, 10, 9]

maximum = reduce(lambda a, b: a if a > b else b, nums)
minimum = reduce(lambda a, b: a if a < b else b, nums)

print(maximum) # Вывод: 10
print(minimum) # Вывод: 5
# ```
# 3. **Сумма или произведение списка**: Вы можете использовать `reduce()` для нахождения суммы или произведения всех элементов итерабельного объекта:


from functools import reduce

nums = [1, 2, 3, 4, 5]

summation = reduce(lambda a, b: a+b, nums)
product = reduce(lambda a, b: a*b, nums)

print(summation) # Вывод: 15
print(product)   # Вывод: 120


# 4. **Объединение строк**: Если у вас есть список строк, вы можете использовать `reduce`, чтобы объединить все строки в одну:


from functools import reduce

strs = ['Python', ' is', ' great', '!']

result = reduce(lambda a, b: a+b, strs, "-12")

print(result) # Вывод: Python is great!


# Здесь функция `reduce` применяет функцию `lambda` для объединения всех строк.

# Обратите внимание, что `reduce()` не является самой понятной функцией. Во многих случаях его можно заменить на пон
