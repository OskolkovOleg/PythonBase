# filter() является встроенной функцией Python,
# используемой для выбора определенных элементов 
# из данной последовательности элементов 
# (как список, набор, кортеж) 
# и создает список элементов, 
# для которых предоставленная 
# функция возвращает True. Синтаксис:
# filter(функция, последовательность)


# Определяем список
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Определяем фильтрующую функцию
def is_even(n):
    return n % 2 == 0
        
# Используем функцию filter()
filtered_numbers = filter(is_even, numbers)

# Результат: <filter object at 0x0000019E4EC4C940>
# Чтобы увидеть результаты в виде списка, нам нужно приведение типа
print(list(filtered_numbers))  # Вывод: [2, 4, 6, 8, 10]


# Применения filter()
# Очистка данных: Предположим, у вас есть список 
# с некоторыми значениями None 
# и вы хотите удалить все их.

data = [1, 0, None, False, None, True]
clean_data = list(filter(None, data))
print(clean_data)  # Вывод: [1, 2, 3, 4]

# Это работает, потому что None считается False 
# в булевом контексте, так filter(None, data) 
# эффективно удаляет все вхождения None.

# Фильтрация на основе условия: Предположим, 
# у вас есть список строк, и вы хотите сохранить 
# только строки, длина которых более 5 символов.

strings = ['hello', 'world', 'openai', 'guide', 'deep', 'learning', 'algorithm']
long_strings = list(filter(lambda x: len(x) > 5, strings))
print(long_strings)  # Вывод: ['openai', 'learning', 'algorithm']


# Фильтрация выбросов в данных: 
# Предположим, у вас есть список чисел (может представлять высоту, 
# вес или любую меру), и вы хотите отфильтровать 
# числа, которые меньше Q1-1.5IQR 
# или больше Q3+1.5IQR, потому что они 
# являются статистическими выбросами.

import numpy as np

data = np.random.normal(loc=100, scale=10, size=100)  # нормальное распределение
q1 = np.percentile(data, 25)
q3 = np.percentile(data, 75)
iqr = q3 - q1

# Фильтруем выбросы
filtered_data = list(filter(lambda x: q1-1.5*iqr < x < q3+1.5*iqr, data))


# Фильтрация в обработке изображений: 
# filter() часто используется в обработке 
# изображений, где должны выполняться 
# определенные условия, например, выбор 
# пикселей выше определенной интенсивности 
# цвета или порога.