# В Python ключевые слова `async` и `await` 
# используются для работы с асинхронным 
# программированием. Асинхронное 
# программирование позволяет создавать 
# не блокирующие операции и параллельно 
# выполнять несколько задач.

# Ключевое слово `async` используется для 
# определения асинхронной функции в Python. 
# Объявление функции с ключевым словом `async` 
# указывает, что эта функция может содержать операции, 
# которые будут выполняться асинхронно. 
# В асинхронной функции можно использовать ключевое слово 
# `await`, чтобы указать, что операция 
# должна быть ожидаемой (не блокирующей).

# Пример асинхронной функции:

async def foo():
    print("Начало функции")
    await asyncio.sleep(1)
    print("Ожидание завершено")


# В этом примере функция `foo` содержит 
# операцию `await asyncio.sleep(1)`, 
# которая ожидает в течение 1 секунды 
# без блокировки выполнения других задач. 
# В это время управление передается другим 
# задачам, позволяя им выполняться параллельно. 
# Когда операция `asyncio.sleep(1)` завершается, 
# выполнение функции `foo` продолжается сразу после операции `await`.

# Для использования асинхронных функций 
# необходимо создать асинхронный цикл 
# событий (event loop) и запустить его. 
# В Python стандартная библиотека asyncio 
# предоставляет такой функционал. Пример использования 
# асинхронной функции `foo` с использованием asyncio:

import asyncio

async def foo():
    print("Начало функции")
    await asyncio.sleep(1)
    print("Ожидание завершено")

async def main():
    await foo()

loop = asyncio.get_event_loop()
loop.run_until_complete(main())

# В этом примере асинхронная функция `foo` 
# вызывается внутри асинхронной функции `main`, 
# которая в свою очередь запускается в асинхронном 
# цикле событий `loop`. Метод `run_until_complete` 
# выполняет асинхронную функцию `main` до ее завершения.

# Асинхронное программирование в Python позволяет 
# эффективно работать с сетевыми запросами, 
# операциями ввода-вывода и другими асинхронными операциями, 
# не блокируя выполнение других задач. Оно особенно полезно 
# в ситуациях, когда нужно обрабатывать большое количество 
# задач одновременно.